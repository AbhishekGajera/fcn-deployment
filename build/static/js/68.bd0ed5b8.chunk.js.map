{"version":3,"sources":["app/IBO-components/ClientList/index.js"],"names":["ClientList","history","useHistory","useCookies","cookies","setCookie","useState","itemlist","setitemlist","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","onSubmit","data","a","alert","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","console","log","useEffect","endOffset","getUsers","items","results","slice","Math","ceil","length","info","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","contactno","pattern","branch","email","role","aria-label","href","onClick","event","preventDefault","user","aria-current","map","item","id","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/68.bd0ed5b8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { getUsers ,userLogout } from \"../../../utils/APIs\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\n\n\nconst ClientList = () => {\n  const history = useHistory()\n  const [cookies,setCookie ] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n \n  const { register, handleSubmit, formState: { errors , isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\n  const onSubmit = async (data) => {\n  alert(data);\n  };\n\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage, setitemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({})\n  // const [first, setfirst] = useState(second)\n\n\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n  };\n\n  const handleShow = (value) =>{ \n    setvalueToEdit(value)\n   \n      setShow(true);\n  \n  }\n  console.log(valueToEdit);\n\n  useEffect(() => {\n    (async () => {\n      const endOffset = itemOffset + itemsPerPage;\n      try {\n        const items = await (await getUsers(itemsPerPage, itemOffset)).data;\n        setitemlist(items?.results);  \n        // Fetch items from another resources.\n        console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n        setCurrentItems(items?.results?.slice(itemOffset, endOffset));\n        setPageCount(Math.ceil(items?.results?.length / itemsPerPage));\n      } catch (error) {\n        console.info(\"error \",error)\n        if (\n          error?.response?.data?.message\n        ) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n\n        if(error?.response?.data?.code === 401){\n          const formData = JSON.stringify({\n            refreshToken: localStorage.getItem('refreshToken'),\n          });\n          setCookie('user', null , { path: '/' });\n          userLogout(formData).finally(() => {\n            history.push('/user-pages/login-1')\n          })\n        }\n      }\n\n\n    })();\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % itemlist.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n    const deleteData =(uid)=>{\n      // console.log(uid);\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: \"You will not be able to recover this imaginary file!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonColor: \"#DD6B55\",\n        confirmButtonColor: \"#DD6B55\",\n        confirmButtonText: \"Yes, delete it!\",\n        cancelButtonText: \"No, keep it\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          // return (\n          //   deleteUsr(uid, () => {\n          //     list();\n          //   }),\n          //   Swal.fire(\n          //     \"Deleted!\",\n          //     \"Your imaginary file has been deleted.\",\n          //     \"success\",\n          //   )\n          // );\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n        }\n      });\n    }\n   \n  return (\n    <div>\n          <Modal\n      show={show}\n      onHide={handleClose}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Update Client</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <p className=\"card-description\"> Update Client </p>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Name</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          defaultValue={valueToEdit.name}\n                          {...register(\"name\", { required: true })}\n                       \n                        />\n                        {errors && errors.name && <p>name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n{/* \n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div> */}\n\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Contact No\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"contactno\"\n                          defaultValue={valueToEdit.contactno}\n                          {...register(\"contactno\", {\n                            required: true,\n                            pattern: strongRegexMo,\n                          })}\n                        />\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"required\" && (\n                            <p>contact number is required field</p>\n                          )}\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"pattern\" && (\n                            <p>invalid phone number please use valid formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  </div>\n                  <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Branch</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          defaultValue={valueToEdit.branch}\n\n                          name=\"branch\"\n                          {...register(\"branch\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>branch is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"email\"\n                          defaultValue={valueToEdit.email}\n\n                          {...register(\"email\", {\n                            required: true,\n                            pattern: /^\\S+@\\S+$/i,\n                          })}\n                        />\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"required\" && (\n                            <p>email is required field</p>\n                          )}\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"pattern\" && (\n                            <p>invalid email formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                 \n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Role</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          defaultValue={valueToEdit.role}\n\n                          name=\"role\"\n                          {...register(\"role\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>role is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n              \n             \n\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                  >\n                    UPDATE\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      </Modal.Body>\n     \n    \n    </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / create Clients </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create clients\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Client list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.contactno}</td>\n                        <td>{item?.branch}</td>\n                        <td>{item?.email}</td>\n                        <td>{item?.role}</td>\n                        <td>\n                          <i onClick={()=> handleShow(item)} className=\"mdi mdi-lead-pencil\"></i>\n                        </td>\n                        <td>\n                         <i onClick={()=> deleteData(item?.id)} className=\"mdi mdi-delete\"> </i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClientList;\n"],"sourceRoot":""}