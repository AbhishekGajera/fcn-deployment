{"version":3,"sources":["app/Admin-components/BranchesList/index.js"],"names":["BranchList","useCookies","cookies","useState","itemlist","setitemlist","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","console","log","onSubmit","data","a","alert","useEffect","endOffset","getBranches","items","results","info","slice","Math","ceil","length","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","contactno","pattern","branch","email","role","aria-label","href","onClick","event","preventDefault","user","aria-current","map","item","id","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/26.974bd202.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { getBranches } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\n\nconst BranchList = () => {\n  const [cookies] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage, setitemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({})\n\n  const { register, handleSubmit, formState: { errors , isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\n\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n  };\n\n  const handleShow = (value) =>{ \n    setvalueToEdit(value)\n   \n      setShow(true);\n  \n  }\n  console.log(valueToEdit);\n  const onSubmit = async (data) => {\n    alert(data);\n    };\n\n\n  useEffect(() => {\n    (async () => {\n      const endOffset = itemOffset + itemsPerPage;\n      const items = await (await getBranches(itemsPerPage, itemOffset)).data;\n      setitemlist(items?.results);\n      console.info(\"items \", items);\n\n      // Fetch items from another resources.\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items?.results?.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items?.results?.length / itemsPerPage));\n    })();\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % itemlist.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n  const deleteBranch =(uid)=>{\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // return (\n        //   deleteUsr(uid, () => {\n        //     list();\n        //   }),\n        //   Swal.fire(\n        //     \"Deleted!\",\n        //     \"Your imaginary file has been deleted.\",\n        //     \"success\",\n        //   )\n        // );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  }\n  return (\n    <div>\n         <Modal\n      show={show}\n      onHide={handleClose}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Update Client</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <p className=\"card-description\"> Update Client </p>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Name</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          defaultValue={valueToEdit.name}\n                          {...register(\"name\", { required: true })}\n                       \n                        />\n                        {errors && errors.name && <p>name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n{/* \n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div> */}\n\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Contact No\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"contactno\"\n                          defaultValue={valueToEdit.contactno}\n                          {...register(\"contactno\", {\n                            required: true,\n                            pattern: strongRegexMo,\n                          })}\n                        />\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"required\" && (\n                            <p>contact number is required field</p>\n                          )}\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"pattern\" && (\n                            <p>invalid phone number please use valid formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  </div>\n                  <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Branch</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          defaultValue={valueToEdit.branch}\n\n                          name=\"branch\"\n                          {...register(\"branch\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>branch is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"email\"\n                          defaultValue={valueToEdit.email}\n\n                          {...register(\"email\", {\n                            required: true,\n                            pattern: /^\\S+@\\S+$/i,\n                          })}\n                        />\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"required\" && (\n                            <p>email is required field</p>\n                          )}\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"pattern\" && (\n                            <p>invalid email formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                 \n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Role</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          defaultValue={valueToEdit.role}\n\n                          name=\"role\"\n                          {...register(\"role\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>role is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n              \n             \n\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                  >\n                    UPDATE\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      </Modal.Body>\n     \n    \n    </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">branches / Fetch Branch </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create branches\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Client list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.contactno}</td>\n                        <td>{item?.branch}</td>\n                        <td>{item?.email}</td>\n                        <td>{item?.role}</td>\n                        <td>\n                          <i onClick={()=> handleShow(item)} className=\"mdi mdi-lead-pencil\"></i>\n                        </td>\n                        <td>\n                          <i  onClick={()=> deleteBranch(item?.id)} className=\"mdi mdi-delete\"></i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BranchList;\n"],"sourceRoot":""}