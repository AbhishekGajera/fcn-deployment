{"version":3,"sources":["../node_modules/react-bootstrap/esm/Col.js","app/client-component/SipCalc.js"],"names":["DEVICE_SIZES","Col","forwardRef","_ref","ref","bsPrefix","className","_ref$as","as","Component","props","prefix","spans","classes","forEach","brkPoint","span","offset","order","propValue","_propValue$span","infix","push","length","createElement","apply","concat","displayName","SipCalc","useState","type","settype","amounts","setamounts","totalYear","settotalYear","returnRateAmount","setreturnRateAmount","settotalValue","futureValues","setfutureValues","investedValue","setinvestedValue","responsive","animation","animateScale","animateRotate","legend","trafficOptions","trafficData","settrafficData","useEffect","ctx","document","getElementById","getContext","gradientdonut1","createLinearGradient","addColorStop","gradientdonut2","datasets","data","backgroundColor","hoverBackgroundColor","borderColor","legendColor","labels","React","calculateResult","instalments","investment","monthlyRate","months","futureValue","total","Math","pow","round","onChangeAmount","changeEvent","target","value","isNaN","onChangeRate","onChangeYear","numberWithCommas","x","toString","replace","aria-label","aria-current","Container","id","defaultActiveKey","sm","variant","Item","onClick","Link","eventKey","style","padding","Content","border","Pane","margin","display","justifyContent","flexWrap","name","onChange","width","accentColor","size","tooltip","max","options"],"mappings":"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","file":"static/js/11.e04c8a68.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span, offset, order;\n\n    if (propValue != null && typeof propValue === 'object') {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span != null) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;","import React, { useState, useEffect } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Tab, Col, Nav } from \"react-bootstrap\";\n\nconst SipCalc = () => {\n  const [type, settype] = useState(0);\n\n  const [amounts, setamounts] = useState(25000);\n  const [totalYear, settotalYear] = useState(10);\n  const [returnRateAmount, setreturnRateAmount] = useState(12);\n\n  const [totalValue, settotalValue] = useState(0);\n  const [futureValues, setfutureValues] = useState(0);\n  const [investedValue, setinvestedValue] = useState(0);\n\n  // chart management\n  const [trafficOptions] = useState({\n    responsive: true,\n    animation: {\n      animateScale: true,\n      animateRotate: true,\n    },\n    legend: false,\n  });\n\n  const [trafficData, settrafficData] = useState({});\n  useEffect(() => {\n    //your code\n    var ctx = document.getElementById(\"visitSaleChart\").getContext(\"2d\");\n\n    var gradientdonut1 = ctx.createLinearGradient(0, 0, 0, 181);\n    gradientdonut1.addColorStop(0, \"rgba(54, 215, 232, 1)\");\n    gradientdonut1.addColorStop(1, \"rgba(177, 148, 250, 1)\");\n\n    var gradientdonut2 = ctx.createLinearGradient(0, 0, 0, 50);\n    gradientdonut2.addColorStop(0, \"rgba(6, 185, 157, 1)\");\n    gradientdonut2.addColorStop(1, \"rgba(132, 217, 210, 1)\");\n\n    const newTrafficData = {\n      datasets: [\n        {\n          data: [investedValue, futureValues],\n          backgroundColor: [gradientdonut1, gradientdonut2],\n          hoverBackgroundColor: [gradientdonut1, gradientdonut2],\n          borderColor: [gradientdonut1, gradientdonut2],\n          legendColor: [gradientdonut1, gradientdonut2],\n        },\n      ],\n\n      // These labels appear in the legend and in the tooltips when hovering different arcs\n      labels: [\"invested amount\", \"Est. returns\"],\n    };\n    settrafficData(newTrafficData);\n  }, [investedValue, futureValues]);\n\n  React.useEffect(() => {\n    calculateResult();\n  }, [amounts, totalYear, returnRateAmount, type]);\n\n  const calculateResult = () => {\n    let investment = amounts;\n    let instalments;\n    if (type === 0) {\n      var monthlyRate = returnRateAmount / 12 / 100;\n      var months = totalYear * 12;\n      var futureValue = 0;\n\n      var total = investment * totalYear * returnRateAmount;\n\n      futureValue =\n        (investment *\n          (1 + monthlyRate) *\n          (Math.pow(1 + monthlyRate, months) - 1)) /\n        monthlyRate;\n      instalments = investment * totalYear * 12;\n    } else {\n      var total = investment;\n      futureValue = Math.round(\n        Math.pow(1 + returnRateAmount / 100, totalYear) * amounts\n      );\n      instalments = investment;\n    }\n\n    settotalValue(total === \"NaN\" ? \"0\" : total);\n    setfutureValues(Math.round(futureValue));\n    setinvestedValue(instalments);\n  };\n\n  const onChangeAmount = (changeEvent) => {\n    if (changeEvent.target.value < 100001) {\n      setamounts(changeEvent.target.value);\n    }\n\n    if (\n      changeEvent.target.value > 100000 &&\n      !isNaN(+changeEvent.target.value)\n    ) {\n      setamounts(100000);\n    }\n  };\n\n  const onChangeRate = (changeEvent) => {\n    if (changeEvent.target.value < 31) {\n      setreturnRateAmount(changeEvent.target.value);\n    }\n\n    if (changeEvent.target.value > 30 && !isNaN(+changeEvent.target.value)) {\n      setreturnRateAmount(30);\n    }\n  };\n\n  const onChangeYear = (changeEvent) => {\n    if (changeEvent.target.value < 31) {\n      settotalYear(changeEvent.target.value);\n    }\n\n    if (changeEvent.target.value > 30 && !isNaN(+changeEvent.target.value)) {\n      settotalYear(10);\n    }\n  };\n\n  const numberWithCommas = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  return (\n    <div>\n      <div>\n        <div className=\"page-header\">\n          <h3 className=\"page-title\">\n            <span className=\"page-title-icon bg-gradient-primary text-white mr-2\">\n              <i className=\"mdi mdi-home\"></i>\n            </span>{\" \"}\n            Dashboard{\" \"}\n          </h3>\n          <nav aria-label=\"breadcrumb\">\n            <ul className=\"breadcrumb\">\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                <span></span>Overview{\" \"}\n                <i className=\"mdi mdi-alert-circle-outline icon-sm text-primary align-middle\"></i>\n              </li>\n            </ul>\n          </nav>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-7 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                  <Col sm={12}>\n                    <Nav variant=\"pills\" className=\"d-flex row\">\n                      <Nav.Item onClick={() => settype(0)}>\n                        <Nav.Link eventKey=\"first\">SIP</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item onClick={() => settype(1)}>\n                        <Nav.Link eventKey=\"second\">Lumpsum</Nav.Link>\n                      </Nav.Item>\n                    </Nav>\n                  </Col>{\" \"}\n                  <br />\n                  <div style={{ padding: \"0px !important\" }}>\n                    <Tab.Content style={{ border: \"none\" }}>\n                      <Tab.Pane eventKey=\"first\">\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Monthly investment</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={amounts}\n                                onChange={onChangeAmount}\n                              />{\" \"}\n                              ₹\n                            </div>\n                          </div>\n                          <input\n                            type=\"range\"\n                            style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                            value={amounts}\n                            onChange={onChangeAmount}\n                            size=\"lg\"\n                            tooltip=\"off\"\n                            variant=\"primary\"\n                            max={100000}\n                          />\n                        </div>\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Expected return rate (p.a)</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={returnRateAmount}\n                                onChange={onChangeRate}\n                              />{\" \"}\n                              %\n                            </div>\n                          </div>\n                          <div>\n                            <input\n                              type=\"range\"\n                              style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                              value={returnRateAmount}\n                              onChange={onChangeRate}\n                              size=\"lg\"\n                              tooltip=\"off\"\n                              variant=\"primary\"\n                              max={30}\n                            />\n                          </div>\n                        </div>\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Time period</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={totalYear}\n                                onChange={onChangeYear}\n                              />{\" \"}\n                              Yr\n                            </div>\n                          </div>\n                          <input\n                            type=\"range\"\n                            style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                            value={totalYear}\n                            onChange={onChangeYear}\n                            size=\"lg\"\n                            tooltip=\"off\"\n                            variant=\"primary\"\n                            max={30}\n                          />\n                        </div>\n                      </Tab.Pane>\n                      <Tab.Pane eventKey=\"second\">\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Total investment</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={amounts}\n                                onChange={onChangeAmount}\n                              />{\" \"}\n                              ₹\n                            </div>\n                          </div>\n                          <input\n                            type=\"range\"\n                            style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                            value={amounts}\n                            onChange={onChangeAmount}\n                            size=\"lg\"\n                            tooltip=\"off\"\n                            variant=\"primary\"\n                            max={100000}\n                          />\n                        </div>\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Expected return rate (p.a)</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={returnRateAmount}\n                                onChange={onChangeRate}\n                              />{\" \"}\n                              %\n                            </div>\n                          </div>\n                          <div>\n                            <input\n                              type=\"range\"\n                              style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                              value={returnRateAmount}\n                              onChange={onChangeRate}\n                              size=\"lg\"\n                              tooltip=\"off\"\n                              variant=\"primary\"\n                              max={30}\n                            />\n                          </div>\n                        </div>\n                        <div style={{ margin: \"10px 0px\" }}>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <span>Time period</span>\n                            <div>\n                              <input\n                                type=\"text\"\n                                className=\"sipInput\"\n                                id=\"exampleInputEmail1\"\n                                name=\"investment\"\n                                value={totalYear}\n                                onChange={onChangeYear}\n                              />{\" \"}\n                              Yr\n                            </div>\n                          </div>\n                          <input\n                            type=\"range\"\n                            style={{ width: \"100%\", accentColor: \"#00d09c\" }}\n                            value={totalYear}\n                            onChange={onChangeYear}\n                            size=\"lg\"\n                            tooltip=\"off\"\n                            variant=\"primary\"\n                            max={30}\n                          />\n                        </div>\n                      </Tab.Pane>\n                    </Tab.Content>\n                  </div>\n                </Tab.Container>\n\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      margin: \"10px 0px\",\n                    }}\n                  >\n                    <span>Invested amount</span>\n                    <span>{numberWithCommas(investedValue)} &nbsp; ₹</span>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      margin: \"10px 0px\",\n                    }}\n                  >\n                    <span>Est. returns</span>\n                    <span>\n                      {numberWithCommas(futureValues - investedValue)} &nbsp; ₹\n                    </span>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      margin: \"10px 0px\",\n                    }}\n                  >\n                    <span>Total value</span>\n                    <span>{numberWithCommas(futureValues)} &nbsp; ₹</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-5 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-gradient-primary btn-fw\"\n                  >\n                    Invest now\n                  </button>\n                </h4>\n                <Doughnut\n                  data={trafficData}\n                  options={trafficOptions}\n                  id=\"visitSaleChart\"\n                />\n                <div\n                  id=\"traffic-chart-legend\"\n                  className=\"rounded-legend legend-vertical legend-bottom-left pt-4\"\n                >\n                  <ul>\n                    <li>\n                      <span className=\"legend-dots bg-info\"></span>Invested\n                      amount\n                    </li>\n                    <li>\n                      <span className=\"legend-dots bg-success\"></span>Est.\n                      returns\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SipCalc;\n"],"sourceRoot":""}